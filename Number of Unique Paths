Count all possible paths from top left to bottom right of a mXn matrix : 

Examples : 
Input :  m = 2, n = 2;
Output : 2
There are two paths
(0, 0) -> (0, 1) -> (1, 1)
(0, 0) -> (1, 0) -> (1, 1)

Input :  m = 2, n = 3;
Output : 3
There are three paths
(0, 0) -> (0, 1) -> (0, 2) -> (1, 2)
(0, 0) -> (0, 1) -> (1, 1) -> (1, 2)
(0, 0) -> (1, 0) -> (1, 1) -> (1, 2)

Following is the recursive solution
int NPaths(int m, int n) 
{ 
        if (m == 1 || n == 1) 
            return 1; 
     
        return  numberOfPaths(m-1, n) + numberOfPaths(m, n-1); 
          
} 

The above solution has exponential complexity, so we draw the following structure of our proble. 
As you can see there are many subproblems which are solved again and again. So this is an example of dynamic programming where we have 
overlapping subproblems and optimal substructure.
We can solve this by using bottom up approach(tabulation).
                     Npaths(3, 3)
                       /        \         
         Npaths(2, 3)            Npaths(3, 2)
         /     \                   /     \          
Npaths(1, 3) Npaths(2, 2)   Npaths(2, 2) Npaths(3, 1)
    /        /       \                           \
    1    Npaths(1,2) Npaths(2, 1)                 1
    
  
  Following is the solution using dynamic programming and we have taken the help of above recursive approach -
  
    int Npaths(int m, int n) 
    { 
        int pathCount[][] = new int[m][n]; 
        for (int i = 0; i < m; i++) 
            pathCount[i][0] = 1; 
            
        for (int j = 0; j < n; j++) 
            pathCount[0][j] = 1; 
   
        // Calculate count of paths for other  
        // cells in bottom-up manner using 
        // the recursive solution 
        for (int i = 1; i < m; i++) 
        { 
            for (int j = 1; j < n; j++) 
            {
                 pathCount[i][j] = pathCount[i-1][j] + pathCount[i][j-1]; 
            }
        }
        return count[m-1][n-1]; 
    } 
